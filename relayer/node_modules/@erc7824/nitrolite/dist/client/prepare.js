"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NitroliteTransactionPreparer = void 0;
const viem_1 = require("viem");
const Errors = __importStar(require("../errors"));
const state_1 = require("./state");
class NitroliteTransactionPreparer {
    constructor(dependencies) {
        this.deps = dependencies;
    }
    async prepareDepositTransactions(tokenAddress, amount) {
        const transactions = [];
        const spender = this.deps.addresses.custody;
        const owner = this.deps.account.address;
        if (tokenAddress !== viem_1.zeroAddress) {
            const allowance = await this.deps.erc20Service.getTokenAllowance(tokenAddress, owner, spender);
            if (allowance < amount) {
                try {
                    const approveTx = await this.deps.erc20Service.prepareApprove(tokenAddress, spender, amount);
                    transactions.push(approveTx);
                }
                catch (err) {
                    throw new Errors.ContractCallError('prepareApprove (for deposit)', err, {
                        tokenAddress,
                        spender,
                        amount,
                    });
                }
            }
        }
        try {
            const depositTx = await this.deps.nitroliteService.prepareDeposit(tokenAddress, amount);
            transactions.push(depositTx);
        }
        catch (err) {
            throw new Errors.ContractCallError('prepareDeposit', err, { tokenAddress, amount });
        }
        return transactions;
    }
    async prepareCreateChannelTransaction(params) {
        try {
            const { initialState } = await (0, state_1._prepareAndSignInitialState)(this.deps, params);
            return await this.deps.nitroliteService.prepareCreateChannel(params.channel, initialState);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareCreateChannelTransaction', err, { params });
        }
    }
    async prepareDepositAndCreateChannelTransactions(tokenAddress, amount, params) {
        const transactions = [];
        const spender = this.deps.addresses.custody;
        const owner = this.deps.account.address;
        if (tokenAddress !== viem_1.zeroAddress) {
            const allowance = await this.deps.erc20Service.getTokenAllowance(tokenAddress, owner, spender);
            if (allowance < amount) {
                try {
                    const approveTx = await this.deps.erc20Service.prepareApprove(tokenAddress, spender, amount);
                    transactions.push(approveTx);
                }
                catch (err) {
                    throw new Errors.ContractCallError('prepareApprove (for deposit)', err, {
                        tokenAddress,
                        spender,
                        amount,
                    });
                }
            }
        }
        try {
            const { initialState } = await (0, state_1._prepareAndSignInitialState)(this.deps, params);
            const depositTx = await this.deps.nitroliteService.prepareDepositAndCreateChannel(tokenAddress, amount, params.channel, initialState);
            transactions.push(depositTx);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareDepositAndCreateChannel', err, {
                tokenAddress,
                amount,
            });
        }
        return transactions;
    }
    async prepareCheckpointChannelTransaction(params) {
        const { channelId, candidateState, proofStates = [] } = params;
        if (!candidateState.sigs || candidateState.sigs.length < 2) {
            throw new Errors.InvalidParameterError('Candidate state for checkpoint must be signed by both participants.');
        }
        try {
            return await this.deps.nitroliteService.prepareCheckpoint(channelId, candidateState, proofStates);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareCheckpointChannelTransaction', err, { params });
        }
    }
    async prepareChallengeChannelTransaction(params) {
        const { channelId, candidateState, proofStates = [] } = params;
        const { challengerSig } = await (0, state_1._prepareAndSignChallengeState)(this.deps, params);
        try {
            return await this.deps.nitroliteService.prepareChallenge(channelId, candidateState, proofStates, challengerSig);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareChallengeChannelTransaction', err, { params });
        }
    }
    async prepareResizeChannelTransaction(params) {
        const { resizeStateWithSigs, channelId } = await (0, state_1._prepareAndSignResizeState)(this.deps, params);
        try {
            return await this.deps.nitroliteService.prepareResize(channelId, resizeStateWithSigs);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareResizeChannelTransaction', err, { params });
        }
    }
    async prepareCloseChannelTransaction(params) {
        try {
            const { finalStateWithSigs, channelId } = await (0, state_1._prepareAndSignFinalState)(this.deps, params);
            return await this.deps.nitroliteService.prepareClose(channelId, finalStateWithSigs);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareCloseChannelTransaction', err, { params });
        }
    }
    async prepareWithdrawalTransaction(tokenAddress, amount) {
        try {
            return await this.deps.nitroliteService.prepareWithdraw(tokenAddress, amount);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareWithdrawalTransaction', err, { amount, tokenAddress });
        }
    }
    async prepareApproveTokensTransaction(tokenAddress, amount) {
        const spender = this.deps.addresses.custody;
        if (tokenAddress === viem_1.zeroAddress) {
            throw new Errors.InvalidParameterError('Cannot prepare approval for ETH (zero address)');
        }
        try {
            return await this.deps.erc20Service.prepareApprove(tokenAddress, spender, amount);
        }
        catch (err) {
            if (err instanceof Errors.NitroliteError)
                throw err;
            throw new Errors.ContractCallError('prepareApproveTokensTransaction', err, {
                amount,
                tokenAddress,
                spender,
            });
        }
    }
}
exports.NitroliteTransactionPreparer = NitroliteTransactionPreparer;
