"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCMethod = exports.EIP712AuthTypes = exports.NitroliteErrorCode = void 0;
__exportStar(require("./request"), exports);
__exportStar(require("./response"), exports);
__exportStar(require("./filters"), exports);
__exportStar(require("./common"), exports);
var NitroliteErrorCode;
(function (NitroliteErrorCode) {
    NitroliteErrorCode[NitroliteErrorCode["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
    NitroliteErrorCode[NitroliteErrorCode["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
    NitroliteErrorCode[NitroliteErrorCode["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
    NitroliteErrorCode[NitroliteErrorCode["AUTHENTICATION_FAILED"] = -32000] = "AUTHENTICATION_FAILED";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_SIGNATURE"] = -32003] = "INVALID_SIGNATURE";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_TIMESTAMP"] = -32004] = "INVALID_TIMESTAMP";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_REQUEST_ID"] = -32005] = "INVALID_REQUEST_ID";
    NitroliteErrorCode[NitroliteErrorCode["INSUFFICIENT_FUNDS"] = -32007] = "INSUFFICIENT_FUNDS";
    NitroliteErrorCode[NitroliteErrorCode["ACCOUNT_NOT_FOUND"] = -32008] = "ACCOUNT_NOT_FOUND";
    NitroliteErrorCode[NitroliteErrorCode["APPLICATION_NOT_FOUND"] = -32009] = "APPLICATION_NOT_FOUND";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_INTENT"] = -32010] = "INVALID_INTENT";
    NitroliteErrorCode[NitroliteErrorCode["INSUFFICIENT_SIGNATURES"] = -32006] = "INSUFFICIENT_SIGNATURES";
    NitroliteErrorCode[NitroliteErrorCode["CHALLENGE_EXPIRED"] = -32011] = "CHALLENGE_EXPIRED";
    NitroliteErrorCode[NitroliteErrorCode["INVALID_CHALLENGE"] = -32012] = "INVALID_CHALLENGE";
})(NitroliteErrorCode || (exports.NitroliteErrorCode = NitroliteErrorCode = {}));
exports.EIP712AuthTypes = {
    Policy: [
        { name: 'challenge', type: 'string' },
        { name: 'scope', type: 'string' },
        { name: 'wallet', type: 'address' },
        { name: 'application', type: 'address' },
        { name: 'participant', type: 'address' },
        { name: 'expire', type: 'uint256' },
        { name: 'allowances', type: 'Allowance[]' },
    ],
    Allowance: [
        { name: 'asset', type: 'string' },
        { name: 'amount', type: 'uint256' },
    ],
};
var RPCMethod;
(function (RPCMethod) {
    RPCMethod["AuthRequest"] = "auth_request";
    RPCMethod["AuthChallenge"] = "auth_challenge";
    RPCMethod["AuthVerify"] = "auth_verify";
    RPCMethod["Error"] = "error";
    RPCMethod["GetConfig"] = "get_config";
    RPCMethod["GetLedgerBalances"] = "get_ledger_balances";
    RPCMethod["GetLedgerEntries"] = "get_ledger_entries";
    RPCMethod["GetLedgerTransactions"] = "get_ledger_transactions";
    RPCMethod["GetUserTag"] = "get_user_tag";
    RPCMethod["CreateAppSession"] = "create_app_session";
    RPCMethod["SubmitAppState"] = "submit_app_state";
    RPCMethod["CloseAppSession"] = "close_app_session";
    RPCMethod["GetAppDefinition"] = "get_app_definition";
    RPCMethod["GetAppSessions"] = "get_app_sessions";
    RPCMethod["CreateChannel"] = "create_channel";
    RPCMethod["ResizeChannel"] = "resize_channel";
    RPCMethod["CloseChannel"] = "close_channel";
    RPCMethod["GetChannels"] = "get_channels";
    RPCMethod["GetRPCHistory"] = "get_rpc_history";
    RPCMethod["GetAssets"] = "get_assets";
    RPCMethod["Assets"] = "assets";
    RPCMethod["Message"] = "message";
    RPCMethod["BalanceUpdate"] = "bu";
    RPCMethod["ChannelsUpdate"] = "channels";
    RPCMethod["ChannelUpdate"] = "cu";
    RPCMethod["Ping"] = "ping";
    RPCMethod["Pong"] = "pong";
    RPCMethod["Transfer"] = "transfer";
    RPCMethod["TransferNotification"] = "tr";
    RPCMethod["AppSessionUpdate"] = "asu";
})(RPCMethod || (exports.RPCMethod = RPCMethod = {}));
