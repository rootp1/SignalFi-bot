"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ledgerParamsParsers = exports.TransactionSchema = exports.txTypeEnum = void 0;
const zod_1 = require("zod");
const types_1 = require("../types");
const common_1 = require("./common");
const BalanceObjectSchema = zod_1.z
    .object({
    asset: zod_1.z.string(),
    amount: common_1.decimalSchema,
})
    .transform((b) => b);
const GetLedgerBalancesParamsSchema = zod_1.z
    .object({
    ledger_balances: zod_1.z.array(BalanceObjectSchema),
})
    .transform((raw) => ({
    ledgerBalances: raw.ledger_balances,
}));
const LedgerEntryObjectSchema = zod_1.z
    .object({
    id: zod_1.z.number(),
    account_id: zod_1.z.string(),
    account_type: zod_1.z.number(),
    asset: zod_1.z.string(),
    participant: common_1.addressSchema,
    credit: common_1.decimalSchema,
    debit: common_1.decimalSchema,
    created_at: common_1.dateSchema,
})
    .transform((e) => ({
    id: e.id,
    accountId: e.account_id,
    accountType: e.account_type,
    asset: e.asset,
    participant: e.participant,
    credit: e.credit,
    debit: e.debit,
    createdAt: e.created_at,
}));
const GetLedgerEntriesParamsSchema = zod_1.z
    .object({
    ledger_entries: zod_1.z.array(LedgerEntryObjectSchema),
})
    .transform((raw) => ({
    ledgerEntries: raw.ledger_entries,
}));
exports.txTypeEnum = zod_1.z.nativeEnum(types_1.RPCTxType);
exports.TransactionSchema = zod_1.z
    .object({
    id: zod_1.z.number(),
    tx_type: exports.txTypeEnum,
    from_account: common_1.addressSchema,
    from_account_tag: zod_1.z.string().optional(),
    to_account: common_1.addressSchema,
    to_account_tag: zod_1.z.string().optional(),
    asset: zod_1.z.string(),
    amount: zod_1.z.string(),
    created_at: common_1.dateSchema,
})
    .transform((raw) => ({
    id: raw.id,
    txType: raw.tx_type,
    fromAccount: raw.from_account,
    fromAccountTag: raw.from_account_tag,
    toAccount: raw.to_account,
    toAccountTag: raw.to_account_tag,
    asset: raw.asset,
    amount: raw.amount,
    createdAt: raw.created_at,
}));
const GetLedgerTransactionsParamsSchema = zod_1.z
    .object({
    ledger_transactions: zod_1.z.array(exports.TransactionSchema),
})
    .transform((raw) => ({
    ledgerTransactions: raw.ledger_transactions,
}));
const BalanceUpdateParamsSchema = zod_1.z
    .object({
    balance_updates: zod_1.z.array(BalanceObjectSchema),
})
    .transform((raw) => ({
    balanceUpdates: raw.balance_updates,
}));
const TransferParamsSchema = zod_1.z
    .object({
    transactions: zod_1.z.array(exports.TransactionSchema),
})
    .transform((raw) => ({
    transactions: raw.transactions,
}));
const TransferNotificationParamsSchema = zod_1.z
    .object({
    transactions: zod_1.z.array(exports.TransactionSchema),
})
    .transform((raw) => ({
    transactions: raw.transactions,
}));
exports.ledgerParamsParsers = {
    [types_1.RPCMethod.GetLedgerBalances]: (params) => GetLedgerBalancesParamsSchema.parse(params),
    [types_1.RPCMethod.GetLedgerEntries]: (params) => GetLedgerEntriesParamsSchema.parse(params),
    [types_1.RPCMethod.GetLedgerTransactions]: (params) => GetLedgerTransactionsParamsSchema.parse(params),
    [types_1.RPCMethod.BalanceUpdate]: (params) => BalanceUpdateParamsSchema.parse(params),
    [types_1.RPCMethod.Transfer]: (params) => TransferParamsSchema.parse(params),
    [types_1.RPCMethod.TransferNotification]: (params) => TransferNotificationParamsSchema.parse(params),
};
