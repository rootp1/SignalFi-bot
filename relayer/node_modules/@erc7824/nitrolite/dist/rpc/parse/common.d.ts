import { z } from 'zod';
import { RPCProtocolVersion, RPCChannelStatus, RPCMethod } from '../types';
export interface ParamsParser<T> {
    (params: object[]): T;
}
export declare class ParserParamsMissingError extends Error {
    constructor(method: RPCMethod);
}
export declare const hexSchema: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
export declare const addressSchema: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
export declare const bigIntSchema: z.ZodString;
export declare const dateSchema: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
export declare const decimalSchema: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, string, string | number>, string, string | number>;
export declare const statusEnum: z.ZodNativeEnum<typeof RPCChannelStatus>;
export declare const protocolVersionEnum: z.ZodNativeEnum<typeof RPCProtocolVersion>;
export declare const noop: ParamsParser<unknown>;
