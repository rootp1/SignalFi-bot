import { z } from 'zod';
import { RPCTxType, RPCTransaction } from '../types';
import { ParamsParser } from './common';
export declare const txTypeEnum: z.ZodNativeEnum<typeof RPCTxType>;
export declare const TransactionSchema: z.ZodEffects<z.ZodObject<{
    id: z.ZodNumber;
    tx_type: z.ZodNativeEnum<typeof RPCTxType>;
    from_account: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    from_account_tag: z.ZodOptional<z.ZodString>;
    to_account: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    to_account_tag: z.ZodOptional<z.ZodString>;
    asset: z.ZodString;
    amount: z.ZodString;
    created_at: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
}, "strip", z.ZodTypeAny, {
    amount: string;
    tx_type: RPCTxType;
    asset: string;
    id: number;
    created_at: Date;
    from_account: `0x${string}`;
    to_account: `0x${string}`;
    from_account_tag?: string | undefined;
    to_account_tag?: string | undefined;
}, {
    amount: string;
    tx_type: RPCTxType;
    asset: string;
    id: number;
    created_at: string | Date;
    from_account: string;
    to_account: string;
    from_account_tag?: string | undefined;
    to_account_tag?: string | undefined;
}>, RPCTransaction, {
    amount: string;
    tx_type: RPCTxType;
    asset: string;
    id: number;
    created_at: string | Date;
    from_account: string;
    to_account: string;
    from_account_tag?: string | undefined;
    to_account_tag?: string | undefined;
}>;
export declare const ledgerParamsParsers: Record<string, ParamsParser<unknown>>;
